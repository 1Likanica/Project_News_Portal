python -m venv venv
venv\scripts\activate
pip install django
pip install django-allauth
pip install django-apscheduler
pip install celery
pip install redis
pip install -U "celery[redis]"
python -m pip install django-filter
cd newspaper

python manage.py runserver
celery -A NewsPaper worker -l INFO --pool=solo

В соседнем терминале
python manage.py runapscheduler

python manage.py makemigrations
python manage.py migrate
python manage.py runserver

Создать двух пользователей (с помощью метода User.objects.create_user('username')).

cd newspaper
python manage.py shell

from django.db import models
from django.contrib.auth.models import User
from param import *
from django.db.models import Sum
from news.models import *
dir()

u1 = User.objects.create(username='User1')
u2 = User.objects.create(username='User2')

Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(authorUser=u1)
Author.objects.create(authorUser=u2)

Добавить 4 категории в модель Category.

Category.objects.create(name='Политика')
Category.objects.create(name='Спорт')
Category.objects.create(name='Экономика')
Category.objects.create(name='Культура')

Добавить 2 статьи и 1 новость.

au1 = Author.objects.get(id=1)
au2 = Author.objects.get(id=2)
Post.objects.create(author=au1  , categoryType= 'AR', title='Статья №1 - Автор №1', text='Первый текст, первого автора.')
Post.objects.create(author=au2  , categoryType= 'AR', title='Статья №1 - Автор №2', text='Первый текст, второго автора.')
Post.objects.create(author=au2  , categoryType= 'NW', title='Новости №1 - Автор №2 ', text='Интересные новости, написанные вторым автором.')

Post.objects.get(id=2).preview() 

Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1)) 
Post.objects.get(id=1).postCategory.add(Category.objects.get(id=3))
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=4))

Создать как минимум 4 комментария к разным объектам модели Post 
(в каждом объекте должен быть как минимум один комментарий).

Comment.objects.create(commentPost=Post.objects.get(id=1), userPost=Author.objects.get(id=1).authorUser, text='Интересные комментарий, обычный')
Comment.objects.create(commentPost=Post.objects.get(id=1), userPost=Author.objects.get(id=2).authorUser, text='Скучный комментарий, стандартный')
Comment.objects.create(commentPost=Post.objects.get(id=2), userPost=Author.objects.get(id=1).authorUser, text='Загадочный комментарий, очень странный')
Comment.objects.create(commentPost=Post.objects.get(id=2), userPost=Author.objects.get(id=2).authorUser, text='Я люблю вас')


Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Post.objects.get(id=1).like()
Post.objects.get(id=1).dislike()
Post.objects.get(id=2).like()
Post.objects.get(id=2).dislike()
Post.objects.get(id=3).like()
Post.objects.get(id=3).dislike()

Comment.objects.get(id=1).like()
Comment.objects.get(id=1).dislike()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).dislike()
Comment.objects.get(id=3).like()
Comment.objects.get(id=3).dislike()
Comment.objects.get(id=4).like()
Comment.objects.get(id=4).dislike()

Comment.objects.get(id=2).rating

Обновить рейтинги пользователей.

a1 = Author.objects.get(id=1)
a1.update_rating()
	

Вывести username и рейтинг лучшего пользователя

a1.ratingAuthor
a1.post_set.all().values('rating')
a1.authorUser.comment_set.all().values('rating')


a2 = Author.objects.all().order_by('-ratingAuthor')[:1] 
a2 
for b in a2: 
	b.authorUser.username 
	b.ratingAuthor


Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

a3 = Post.objects.all().order_by('-rating')[:1]
for j in a3:
	f"Data : {j.dataCreations.day}"
	f"Rating: {j.rating}"
	j.author.authorUser
	j.title
	j.preview()


Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

a4 = Comment.objects.all().filter(commentPost=a3)

for d in a4:
	F"Data : {d.dataCreation.day}/{d.dataCreation.month}/{d.dataCreation.year}"
	d.userPost
	F"Rating : {d.rating}"
	d.text






